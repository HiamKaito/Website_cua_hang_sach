@model IndexViewModel

@{
    ViewData["Title"] = "Movie List";
    var titleSort = (Model.SortOrder == "title") ? "title_desc" : "title";
    var releaseDateSort = (Model.SortOrder == "releasedate") ? "releasedate_desc" : "releasedate";
    var genreSort = (Model.SortOrder == "genre_desc") ? "genre" : "genre_desc";
    var ratingSort = (Model.SortOrder == "rating_desc") ? "rating" : "rating_desc";
    var priceSort = (Model.SortOrder == "price_desc") ? "price" : "price_desc";
}

<h1>Index</h1>

<form method="GET">
    <p>
        <select asp-for="MovieGenre" asp-items="Model.Genres">
            <option value="">All</option>
        </select>
        <input type="text" asp-for="SearchString"/>
        <input type="submit" value="Filter"/>
    </p>
</form>

<p>
    <a asp-action="Create">Create New</a>
</p>

<table class="table">
    <thead>
        <tr>
            <th><a  asp-route-sortOrder="@titleSort"
                    asp-route-movieGenre="@Model.MovieGenre"
                    asp-route-searchString="@Model.SearchString">
                @Html.DisplayNameFor(model => model.Movies[0].Title)</a></th>
            <th><a  asp-route-sortOrder="@releaseDateSort"
                    asp-route-movieGenre="@Model.MovieGenre"
                    asp-route-searchString="@Model.SearchString">
                @Html.DisplayNameFor(model => model.Movies[0].ReleaseDate)</a></th>
            <th><a  asp-route-sortOrder="@genreSort"
                    asp-route-movieGenre="@Model.MovieGenre"
                    asp-route-searchString="@Model.SearchString">
                @Html.DisplayNameFor(model => model.Movies[0].Genre)</a></th>
            <th><a  asp-route-sortOrder="@ratingSort"
                    asp-route-movieGenre="@Model.MovieGenre"
                    asp-route-searchString="@Model.SearchString">
                @Html.DisplayNameFor(model => model.Movies[0].Rating)</a></th>
            <th><a  asp-route-sortOrder="@priceSort"
                    asp-route-movieGenre="@Model.MovieGenre"
                    asp-route-searchString="@Model.SearchString">
                @Html.DisplayNameFor(model => model.Movies[0].Price)</a></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
    @foreach (var movie in Model.Movies)
    {
        <tr>
            <td>@movie.Title</td>
            <td>@Html.DisplayFor(item => movie.ReleaseDate)</td>
            <td>@movie.Genre</td>
            <td>@Html.DisplayFor(item => movie.Rating)</td>
            <td>@Html.DisplayFor(item => movie.Price)</td>
            <td>
                <a asp-action="Edit" asp-route-id="@movie.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@movie.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@movie.Id">Delete</a>
            </td>
        </tr>
    }
    </tbody>
</table>

@{
    var prevDisabled = !Model.Movies.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.Movies.HasNextPage ? "disabled" : "";
}

<a  class="btn btn-default @prevDisabled"
    asp-route-sortOrder="@Model.SortOrder"
    asp-route-movieGenre="@Model.MovieGenre"
    asp-route-searchString="@Model.SearchString"
    asp-route-pageIndex="@(Model.Movies.PageIndex -1)">Previous</a>
<a  class="btn btn-default @nextDisabled"
    asp-route-sortOrder="@Model.SortOrder"
    asp-route-movieGenre="@Model.MovieGenre"
    asp-route-searchString="@Model.SearchString"
    asp-route-pageIndex="@(Model.Movies.PageIndex +1)">Next</a>